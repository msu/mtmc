{"format":"Orc1","code":[-128,0,3,-94,-128,16,3,-92,-122,0,3,-66,-122,16,4,14,-16,36,-15,6,-15,-120,-14,-114,-15,78,-15,-24,-14,-42,-13,58,-64,18,0,0,32,-67,-113,96,5,-96,-13,-110,-124,-96,3,-96,-128,0,3,-94,-128,16,3,-92,-124,0,3,-90,-124,16,3,-88,-122,0,3,-66,-122,16,4,14,-16,82,-16,124,-14,-8,33,-67,-112,11,32,-67,-128,0,3,-86,-128,16,3,-84,1,32,18,33,-113,48,0,0,-113,64,0,0,-128,80,3,-96,16,83,-121,69,0,0,2,49,52,50,-32,104,33,-67,-112,11,32,-67,-128,0,3,-86,-128,16,3,-84,-113,48,0,0,-113,64,0,1,-128,80,3,-96,16,83,-121,69,0,0,2,49,52,48,-32,-114,-113,48,0,0,-113,64,0,1,-128,80,3,-96,16,83,-121,69,5,120,2,49,52,48,-32,-90,-113,48,0,0,-113,64,0,1,-113,80,0,0,-128,0,3,-96,16,5,-121,64,0,0,-128,0,3,-86,-128,16,3,-84,2,49,16,80,52,49,-32,-62,-113,48,0,0,-113,64,0,1,-113,80,0,39,-128,0,3,-96,16,5,-121,64,0,0,-128,0,3,-86,-128,16,3,-84,2,49,16,80,52,49,-32,-24,33,-67,-112,11,32,-67,-128,0,3,-76,-128,16,3,-74,-113,32,0,0,-128,48,3,-72,-125,96,3,-66,-125,112,4,14,-128,-128,3,-86,-128,-112,3,-84,1,72,18,71,16,70,32,13,-128,0,3,-96,16,4,-113,80,0,1,-121,80,0,0,33,13,2,1,20,3,2,33,52,33,-31,24,33,-67,-112,11,32,-67,-128,0,3,-74,-128,16,3,-68,52,1,-31,-124,-128,80,3,-76,-125,5,3,-66,-125,21,4,14,-128,32,3,-86,-128,48,3,-84,1,65,18,66,16,64,-128,0,3,-96,16,4,-113,80,0,0,-121,80,0,0,33,-67,-112,11,32,-67,0,48,-128,0,3,-86,-128,16,3,-84,-113,32,0,0,-113,48,0,4,-113,-128,0,4,-113,-112,0,4,1,80,18,81,-128,0,3,-86,1,98,20,96,18,99,1,114,19,112,18,115,-128,16,3,-96,16,18,-125,65,0,0,56,65,-47,-56,0,52,2,33,52,37,-31,-88,-113,96,0,1,0,59,-128,96,4,94,-128,112,4,96,18,99,18,115,0,52,0,53,33,-67,-112,11,32,-67,-128,0,3,-90,-128,16,3,-88,-128,80,3,-80,-128,64,3,-104,21,69,57,64,-46,4,3,17,-62,46,-128,64,3,-102,21,69,57,64,-46,18,2,17,-62,46,-128,64,3,-100,21,69,57,64,-46,32,3,1,-62,46,-128,64,3,-98,21,69,57,64,-46,46,2,1,-62,46,-124,0,3,-90,-124,16,3,-88,-128,32,3,-76,-128,48,3,-74,-128,64,3,-72,16,35,20,36,-121,2,3,-66,-121,18,4,14,-128,64,3,-68,52,52,-46,94,2,49,-124,48,3,-74,-62,110,-128,32,3,-76,-128,48,3,-72,2,33,20,35,-124,32,3,-76,-128,32,3,-86,-128,48,3,-84,1,65,18,66,16,64,-128,16,3,-96,16,20,-125,81,0,0,-124,80,3,-78,33,-67,-112,11,32,-67,-128,96,3,-82,0,34,0,58,1,42,-128,48,3,-104,21,50,57,48,-30,-60,-128,48,3,-102,21,50,57,48,-30,-60,-128,48,3,-100,21,50,57,48,-30,-60,-128,48,3,-98,21,50,57,48,-30,-60,-62,-56,-124,48,3,-80,-113,96,0,0,0,34,56,-96,-46,-106,33,-67,-112,11,32,-67,-128,0,3,-78,56,1,-30,-28,33,-67,-112,11,-113,96,4,98,0,6,-113,96,4,-124,0,6,-113,96,4,98,0,6,0,0,32,-67,-113,96,0,1,-128,112,3,-86,3,113,0,32,1,10,-113,96,0,1,-128,112,3,-84,3,113,0,32,1,26,-128,32,3,-86,1,65,18,66,16,64,-128,48,3,-96,16,52,-125,83,0,0,56,81,-30,-6,-124,0,4,94,-124,16,4,96,33,-67,-112,11,32,-67,-128,0,3,-90,-128,16,3,-88,-128,32,4,94,-128,48,4,96,48,2,-45,-114,48,19,-45,-114,-14,-8,-128,0,3,-68,-128,16,3,-72,52,1,-45,-114,-128,64,3,-70,-113,80,0,0,52,1,-45,-114,2,1,-124,0,3,-68,2,81,52,84,-29,106,2,65,-124,64,3,-70,-128,0,3,-82,-113,16,0,10,17,1,-124,0,3,-82,33,-67,-112,11,1,-82,16,-26,-112,11],"data":[0,-128,0,64,0,32,0,16,-1,-1,0,20,0,18,0,20,0,18,0,40,0,36,0,-56,0,-128,0,0,0,0,0,1,0,80,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,32,32,32,32,32,32,32,32,32,42,42,67,82,65,83,72,42,42,10,32,32,71,97,109,101,32,111,118,101,114,44,32,109,97,110,46,32,71,97,109,101,32,79,118,101,114,33,10,0,32,0],"graphics":[],"sourceName":"/src/games/snake.asm","debugInfo":{"debugStrings":[],"assemblyFile":"/src/games/snake.asm","assemblySource":"################################################################################\n#                                                                              #\n#   Author:     Jerason Banes                                                  #\n#   Version:    1.0                                                            #\n#   Updated:    2025-07-30                                                     #\n#   Clock Rate: 1Mhz or higher                                                 #\n#                                                                              #\n#   A game of snake similar to nibbles.bas and the old Nokia phone game. The   #\n#   game allocates 1440 bytes of memory on the heap to store the game board.   #\n#                                                                              #\n#   A 1MHz clock rate is required due to the way in which the screen is        #\n#   rendered. The full loop over the game board (40 x 36) means a few          #\n#   thousand instructions are needed for each game loop.                       #\n#                                                                              #\n################################################################################\n\n.data\n  directions:\n    up:    0b10000000\n    down:  0b01000000\n    left:  0b00100000\n    right: 0b00010000\n\n  screen:\n    buffer:     -1\n\n  snake:\n    start_x:    20\n    start_y:    18\n\n    x:          20\n    y:          18\n\n    width:      40\n    height:     36\n\n    speed:      200\n    direction:  0b10000000\n    crash:      0\n\n    offset:     0\n    length:     1\n    max_length: 80\n\n    grow_size:  1\n    tail_size:  3\n    tail_x:     .byte 80\n    tail_y:     .byte 80\n\n  food:\n    food_x:     0\n    food_y:     0\n\n  messages:\n    separator: \"--------------------------------\\n\"\n    game_over: \"         **CRASH**\\n  Game over, man. Game Over!\\n\"\n    space: \" \"\n\n.text\nmain:\n\n  lw  t0 start_x\n  lw  t1 start_y\n  sb  t0 tail_x\n  sb  t1 tail_y\n\n  jal  init_game\nmain_loop:\n  jal  draw_snake\n  jal  render_screen\n  jal  poll_controls\n  jal  erase_tail\n  jal  move_snake\n  jal  check_crashed\n  jal  check_food\n\n  j main_loop\n\n  sys  exit\n\n\n#######################################\n# Initialize game state               #\n#######################################\ninit_game:\n  push ra\n\n  # Allocate screen buffer\n  li  a0 1440\n  jal malloc\n  sw  rv buffer\n\n  # Set starting location\n  lw  t0 start_x\n  lw  t1 start_y\n  sw  t0 x\n  sw  t1 y\n  sb  t0 tail_x\n  sb  t1 tail_y\n\n  jal  clear_buffer\n  jal  draw_walls\n  jal  place_food\n  \n  pop  ra\n  ret\n\n\n\n####################################################\n# Clear the screen buffer in preperation for use   #\n####################################################\nclear_buffer:\n  push ra\n\n  # Allocate back buffer\n  lw   t0 width\n  lw   t1 height\n\n  # Malloc and clear memory at 1024 - 2464\n  mov  t2 t0\n  mul  t2 t1\n  li   t3 0         # Counter\n  li   t4 0         # Zero\n\nclear_loop:\n\n  lw   t5 buffer\n  add  t5 t3        # position \u003d buffer + counter\n  sbo  t4 t5 0\n\n  inc  t3           # counter++\n  lt   t3 t2        # counter \u003c (width * height)\n  jnz  clear_loop   # loop while previous statement is true\n\n  pop  ra\n  ret\n\n\n#######################################\n# Draws the 4 walls into the buffer   #\n#######################################\ndraw_walls:\n  push ra\n\n  lw   t0 width\n  lw   t1 height\n\n  # Top line\n  li   t3 0\n  li   t4 1         # One for writing walls\ntop_wall:\n  lw   t5 buffer\n  add  t5 t3\n  sbo  t4 t5 0\n  inc  t3           # counter++\n  lt   t3 t0        # counter \u003c width\n  jnz  top_wall     # loop while previous statement is true\n\n  # Bottom line\n  li   t3 0\n  li   t4 1         # One for writing walls\nbottom_wall:\n  lw   t5 buffer\n  add  t5 t3\n  sbo  t4 t5 1400   # buffer + counter + (40 * (height - 1))\n  inc  t3           # counter++\n  lt   t3 t0        # counter \u003c width\n  jnz  bottom_wall     # loop while previous statement is true\n\n  # Left line\n  li   t3 0\n  li   t4 1         # One for writing walls\n  li   t5 0         # Row offset\nleft_wall:\n  lw   t0 buffer\n  add  t0 t5\n  sbo  t4 t0 0\n\n  lw   t0 width\n  lw   t1 height\n\n  inc  t3           # counter++\n  add  t5 t0        # position +\u003d width\n  lt   t3 t1        # counter \u003c height\n  jnz  left_wall    # loop while previous statement is true\n\n  # Right line\n  li   t3 0\n  li   t4 1         # One for writing walls\n  li   t5 39        # Row offset\nright_wall:\n  lw   t0 buffer\n  add  t0 t5\n  sbo  t4 t0 0\n\n  lw   t0 width\n  lw   t1 height\n\n  inc  t3           # counter++\n  add  t5 t0        # position +\u003d width\n  lt   t3 t1        # counter \u003c height\n  jnz  right_wall   # loop while previous statement is true\n\n  pop  ra\n  ret\n\n\n#######################################\n# Draws the snake to the buffer       #\n#######################################\ndraw_snake:\n  push ra\n\n  lw   t0 offset\n  lw   t1 length\n  li   t2 0         # counter\n  lw   t3 max_length\n\ndraw_snake_loop:\n  lbo  a0 t0 tail_x # x\n  lbo  a1 t0 tail_y # y\n  lw   a2 width     # width\n  lw   a3 height    # height\n\n  mov  t4 a2        # position \u003d width\n  mul  t4 a1        # position \u003d width * y\n  add  t4 a0        # position \u003d (width * y) + x\n\n  push t0\n\n  lw   t0 buffer\n  add  t0 t4\n  li   t5 1\n  sbo  t5 t0 0      # store 1 to address buffer + ((width * y) + x)\n\n  pop  t0\n\ndraw_snake_increment_offset:\n  inc  t0           # offset++\n  mod  t0 t3        # offset \u003d offset % max_length\n\ndraw_snake_counter:\n  inc  t2           # counter++\n  lt   t2 t1        # counter \u003c length\n  jnz  draw_snake_loop\n\n  pop  ra\n  ret\n\n\n\n#######################################\n# Erase the end of the snake\u0027s tail   #\n#######################################\nerase_tail:\n  push ra\n\nerase_tail_check_length:\n  lw   t0 length\n  lw   t1 tail_size\n  lt   t0 t1            # length \u003c tail_size\n  jnz  erase_tail_done  # do not erase tail, let it grow\n\nerase_tail_load:\n  lw   t5 offset\n  lbo  t0 t5 tail_x \n  lbo  t1 t5 tail_y\n\nerase_tail_location:\n  lw   t2 width\n  lw   t3 height\n  mov  t4 t1         # position \u003d y\n  mul  t4 t2         # position \u003d y * width\n  add  t4 t0         # position \u003d (y * width) + x\n\n  lw   t0 buffer\n  add  t0 t4\n  li   t5 0          # Empty cell value\n  sbo  t5 t0 0       # mem[buffer + position]\n\nerase_tail_done:\n  pop  ra\n  ret\n\n\n\n#######################################\n# Renders the buffer to the screen    #\n#######################################\nrender_screen:\n  push ra\n  sys  fbreset\n\n  lw   t0 width\n  lw   t1 height\n\n  li   t2 0         # counter\n  li   t3 4         # rectangle size\n  li   a2 4         # width\n  li   a3 4         # height\n\n  mov  t5 t0\n  mul  t5 t1        # width * height\n\nrender_loop:\n\n  lw   t0 width\n\n  # Compute X\n  mov  a0 t2   \n  mod  a0 t0        # counter % width\n  mul  a0 t3        # x * 4\n\n  # Compute Y\n  mov  a1 t2   \n  div  a1 t0        # counter / width\n  mul  a1 t3        # y * 4\n\n  lw   t1 buffer\n  add  t1 t2\n  lbo  t4 t1 0\n  eqi  t4 1         # value \u003d\u003d 1\n  jz render_increment\n\n  sys fbrect\n\nrender_increment:\n\n  inc  t2\n  lt   t2 t5\n  jnz  render_loop\n\nrender_food:\n  li   a0 0b01      # Food color\n  sys  scolor\n\n  lw   a0 food_x\n  lw   a1 food_y\n\n  mul  a0 t3\n  mul  a1 t3\n  \n  sys fbrect\n\n  sys  fbflush\n\n  pop  ra\n  ret\n\n\n#######################################\n# Calculate the snake\u0027s new position  #\n#######################################\nmove_snake:\n  push ra\n\n  lw   t0 x         # x\n  lw   t1 y         # y\n  lw   t5 direction # current snake direction\n\nmove_up:\n  lw   t4 up\n  and  t4 t5\n\n  neqi t4 0\n  jz   move_down\n\n  dec t1\n  j    move_save\n\nmove_down:\n  lw   t4 down\n  and  t4 t5\n\n  neqi t4 0\n  jz   move_left\n\n  inc t1\n  j    move_save\n\nmove_left:\n  lw   t4 left\n  and  t4 t5\n\n  neqi t4 0\n  jz   move_right\n\n  dec t0\n  j    move_save\n\nmove_right:\n  lw   t4 right\n  and  t4 t5\n\n  neqi t4 0\n  jz   move_save\n\n  inc  t0\n  j    move_save\n\nmove_save:\n\n  sw   t0 x           # Save x of the head\n  sw   t1 y           # Save y of the head\n\n  lw   t2 offset      \n  lw   t3 length\n  lw   t4 max_length\n  add  t2 t3\n  mod  t2 t4\n  \n  sbo  t0 t2 tail_x \n  sbo  t1 t2 tail_y\n\nmove_extend_tail:\n  lw   t4 tail_size\n  lt   t3 t4        # length \u003c tail_size\n  jz   move_increment_offset\n\n  inc  t3\n  sw   t3 length\n  j    move_check_crash\n\nmove_increment_offset:\n  lw   t2 offset\n  lw   t3 max_length\n\n  inc  t2\n  mod  t2 t3\n  sw   t2 offset\n\nmove_check_crash:\n  lw   t2 width\n  lw   t3 height\n  mov  t4 t1         # position \u003d y\n  mul  t4 t2         # position \u003d y * width\n  add  t4 t0         # position \u003d (y * width) + x\n\n  lw   t1 buffer\n  add  t1 t4\n  lbo  t5 t1 0       # mem[buffer + position]\n\n  sw   t5 crash      # If the cell we read is non-zero, crash will be non-zero\n\n  pop ra\n  ret\n  \n\n\n###########################################################\n# Poll joystick until it\u0027s time to render the next frame  #\n###########################################################\npoll_controls:\n  push ra\n\nset_timer:\n  lw  a0 speed\n  sys timer\n\nread_input:\n  \n  sys joystick   # get the latest IO\n  mov t2 rv\n\ncheck_up:\n  lw  t3 up\n  and t3 t2\n  neqi t3 0\n  jnz set_direction\n\ncheck_down:\n  lw  t3 down\n  and t3 t2\n  neqi t3 0\n  jnz set_direction\n\ncheck_left:\n  lw  t3 left\n  and t3 t2\n  neqi t3 0\n  jnz set_direction\n\ncheck_right:\n  lw  t3 right\n  and t3 t2\n  neqi t3 0\n  jnz set_direction\n\nno_input:\n  j   check_timer\n\nset_direction:\n  sw t3 direction\n\ncheck_timer:\n  li  a0 0\n  sys timer\n\n  eqi rv 0\n  jz  read_input        # Keep looping if the timer is not zero\n\n  pop  ra\n  ret\n\n\n\n###########################################################\n# Check if the player has crashed and end the game        #\n###########################################################\ncheck_crashed:\n  push ra\n\n  lw   t0 crash\n  eqi  t0 1\n\n  jnz  crashed\n\n  pop ra\n  ret\n\ncrashed:\n  li  a0 separator\n  sys wstr\n\n  li  a0 game_over\n  sys wstr\n\n  li  a0 separator\n  sys wstr\n\n  sys exit\n\n\n\n###########################################################\n# Find an empty spot to place food                        #\n###########################################################\nplace_food:\n  push ra\n\nplace_food_attempt:\n  li   a0 1         # Screen is surrounded with a wall\n  lw   a1 width\n  dec  a1           # Screen is surrounded with a wall\n\n  sys  rnd\n  mov  t0 rv        # random x coordinate\n\n  li   a0 1         # Screen is surrounded with a wall\n  lw   a1 height\n  dec  a1           # Screen is surrounded with a wall\n\n  sys  rnd\n  mov  t1 rv        # random y coordinate\n\nplace_food_check:\n  lw   t2 width\n\n  mov  t4 t1        # position \u003d y\n  mul  t4 t2        # position \u003d y * width\n  add  t4 t0        # position \u003d (y * width) + x\n\n  lw   t3 buffer\n  add  t3 t4\n  lbo  t5 t3 0\n  eqi  t5 1         # value \u003d\u003d 1\n  jnz  place_food_attempt\n\n  sw   t0 food_x\n  sw   t1 food_y\n\n  pop  ra\n  ret\n\n\n\n###########################################################\n# Check if our snake has touched the food                 #\n###########################################################\ncheck_food:\n  push ra\n\n  lw   t0 x\n  lw   t1 y\n\n  lw   t2 food_x\n  lw   t3 food_y\n\n  eq   t0 t2            # x \u003d\u003d food_x\n  jz   check_food_done\n\n  eq   t1 t3            # y \u003d\u003d food_y\n  jz   check_food_done\n  \ncheck_food_eaten:\n  jal  place_food\n\n  lw   t0 tail_size\n  lw   t1 max_length\n  lt   t0 t1            # tail_size \u003c max_length\n  jz   check_food_done\n\n  lw   t4 grow_size\n  li   t5 0             # counter\ncheck_food_extend_tail:\n  lt   t0 t1            # tail_size \u003c max_length\n  jz   check_food_done  # Tail is as big as it\u0027s going to get\n\n  inc  t0               # tail_size \u003d tail_size + 1\n  sw   t0 tail_size\n\n  inc  t5               # counter++\n  lt   t5 t4            # counter \u003c grow_size\n  jnz  check_food_extend_tail\n\n  inc  t4               # grow_size++\n  sw   t4 grow_size\n\ncheck_food_speed:\n  lw   t0 speed\n  li   t1 10\n  sub  t0 t1\n  sw   t0 speed\n\ncheck_food_done:\n  pop  ra\n  ret\n\n\n#############################################################################\n# Allocate the amount of memory specified in a0 and return a pointer in rv  #\n#############################################################################\nmalloc:\n\n    mov  rv bp\n    add  bp a0\n\n    ret","assemblyLineNumbers":[62,62,62,62,63,63,63,63,64,64,64,64,65,65,65,65,67,67,69,69,70,70,71,71,72,72,73,73,74,74,75,75,77,77,79,79,86,86,89,89,89,89,90,90,91,91,91,91,94,94,94,94,95,95,95,95,96,96,96,96,97,97,97,97,98,98,98,98,99,99,99,99,101,101,102,102,103,103,105,105,106,106,114,114,117,117,117,117,118,118,118,118,121,121,122,122,123,123,123,123,124,124,124,124,128,128,128,128,129,129,130,130,130,130,132,132,133,133,134,134,136,136,137,137,144,144,146,146,146,146,147,147,147,147,150,150,150,150,151,151,151,151,153,153,153,153,154,154,155,155,155,155,156,156,157,157,158,158,161,161,161,161,162,162,162,162,164,164,164,164,165,165,166,166,166,166,167,167,168,168,169,169,172,172,172,172,173,173,173,173,174,174,174,174,176,176,176,176,177,177,178,178,178,178,180,180,180,180,181,181,181,181,183,183,184,184,185,185,186,186,189,189,189,189,190,190,190,190,191,191,191,191,193,193,193,193,194,194,195,195,195,195,197,197,197,197,198,198,198,198,200,200,201,201,202,202,203,203,205,205,206,206,213,213,215,215,215,215,216,216,216,216,217,217,217,217,218,218,218,218,221,221,221,221,222,222,222,222,223,223,223,223,224,224,224,224,226,226,227,227,228,228,230,230,232,232,232,232,233,233,234,234,234,234,235,235,235,235,237,237,240,240,241,241,244,244,245,245,246,246,248,248,249,249,257,257,260,260,260,260,261,261,261,261,262,262,263,263,266,266,266,266,267,267,267,267,268,268,268,268,271,271,271,271,272,272,272,272,273,273,274,274,275,275,277,277,277,277,278,278,279,279,279,279,280,280,280,280,283,283,284,284,292,292,293,293,295,295,295,295,296,296,296,296,298,298,298,298,299,299,299,299,300,300,300,300,301,301,301,301,303,303,304,304,308,308,308,308,311,311,312,312,313,313,316,316,317,317,318,318,320,320,320,320,321,321,322,322,322,322,323,323,324,324,326,326,330,330,331,331,332,332,335,335,335,335,336,336,338,338,338,338,339,339,339,339,341,341,342,342,344,344,346,346,348,348,349,349,356,356,358,358,358,358,359,359,359,359,360,360,360,360,363,363,363,363,364,364,366,366,367,367,369,369,370,370,373,373,373,373,374,374,376,376,377,377,379,379,380,380,383,383,383,383,384,384,386,386,387,387,389,389,390,390,393,393,393,393,394,394,396,396,397,397,399,399,400,400,404,404,404,404,405,405,405,405,407,407,407,407,408,408,408,408,409,409,409,409,410,410,411,411,413,413,413,413,414,414,414,414,417,417,417,417,418,418,419,419,421,421,422,422,422,422,423,423,426,426,426,426,427,427,427,427,429,429,430,430,431,431,431,431,434,434,434,434,435,435,435,435,436,436,437,437,438,438,440,440,440,440,441,441,442,442,442,442,444,444,444,444,446,446,447,447,455,455,458,458,458,458,459,459,463,463,464,464,467,467,467,467,468,468,469,469,470,470,473,473,473,473,474,474,475,475,476,476,479,479,479,479,480,480,481,481,482,482,485,485,485,485,486,486,487,487,488,488,491,491,494,494,494,494,497,497,497,497,498,498,500,500,501,501,503,503,504,504,512,512,514,514,514,514,515,515,517,517,519,519,520,520,523,523,523,523,524,524,526,526,526,526,527,527,529,529,529,529,530,530,532,532,540,540,543,543,543,543,544,544,544,544,545,545,547,547,548,548,550,550,550,550,551,551,551,551,552,552,554,554,555,555,558,558,558,558,560,560,561,561,562,562,564,564,564,564,565,565,566,566,566,566,567,567,568,568,570,570,570,570,571,571,571,571,573,573,574,574,582,582,584,584,584,584,585,585,585,585,587,587,587,587,588,588,588,588,590,590,591,591,593,593,594,594,597,597,599,599,599,599,600,600,600,600,601,601,602,602,604,604,604,604,605,605,605,605,607,607,608,608,610,610,611,611,611,611,613,613,614,614,615,615,617,617,618,618,618,618,621,621,621,621,622,622,622,622,623,623,624,624,624,624,627,627,628,628,636,636,637,637,639,639],"originalFile":"","originalLineNumbers":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"globals":[],"locals}}